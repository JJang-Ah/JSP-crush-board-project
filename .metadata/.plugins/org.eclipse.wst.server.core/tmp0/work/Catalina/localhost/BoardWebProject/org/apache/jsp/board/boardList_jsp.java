/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-20 06:37:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.SimpleDateFormat;
import board.BoardDTO;
import java.util.List;
import board.BoardDAO;
import java.text.*;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.BoardDAO");
    _jspx_imports_classes.add("board.BoardDTO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판 전체보기</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Do+Hyeon&family=Hammersmith+One&family=Paytone+One&display=swap');\r\n");
      out.write("#container { width: 1000px; margin: 0 auto;}\r\n");
      out.write("a { text-decoration: none; color: black;}\r\n");
      out.write("/* 상단 - 메인, 서브 타이틀 */\r\n");
      out.write(".m_title { font-family:'Paytone One', sans-serif; font-size: 3em; text-align: center;}\r\n");
      out.write(".s_title { font-family:'Do Hyeon', sans-serif; font-size: 2em; text-align: center; margin-bottom: 20px}\r\n");
      out.write(".top_info { text-align: right;}\r\n");
      out.write(".s_cnt { float: left; font-weight: bold;}\r\n");
      out.write(".s_id, .s_logout, .s_write { font-weight: bold; clear: both;}\r\n");
      out.write(".s_logout a { color: #c84557;}\r\n");
      out.write(".s_write a { color: #1e94be;}\r\n");
      out.write("\r\n");
      out.write("/* 중단 - 게시판 전체 테이블 */\r\n");
      out.write("table { width: 100%; border: 1px solid black; border-collapse: collapse;}\r\n");
      out.write("tr { height: 40px;}\r\n");
      out.write("th, td { border: 1px solid black;}\r\n");
      out.write("th { background: #ced4da;}\r\n");
      out.write("td { }\r\n");
      out.write("tr:nth-child(2n+1) { background-color: #f8f9fa;}\r\n");
      out.write(".center { text-align: center;}\r\n");
      out.write(".left { padding-left: 5px;}\r\n");
      out.write(".left a:hover { font-weight: bold; color: #32708d;}\r\n");
      out.write(".no_board { text-align: center; font-weight: bold;}\r\n");
      out.write("\r\n");
      out.write("/* 하단 - 페이징 영역*/\r\n");
      out.write("#paging { text-align: center; margin-top: 20px;}\r\n");
      out.write("#pBox { display: inline-block; width: 22px; height: 22px; padding: 5px; margin: 5px;}\r\n");
      out.write("#pBox:hover { background: #495057; color: white; font-weight: bold; border-radius: 10px;}\r\n");
      out.write(".pBox_c { background: #495057; color: white; font-weight: bold; border-radius: 10px;}\r\n");
      out.write(".pBox_b { font-weight: 900;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");

String memberId = (String)session.getAttribute("memberId");
if(memberId == null) { // 세션이 null인 경우
	out.print("<script>location='../logon/memberLoginForm.jsp'</script>");
}

// 날짜 형식 클래스
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

// ################ 페이징(paging) 처리 
// 페이징(paging) 처리를 위한 변수 선언
int pageSize = 10; // 1페이지에 10건의 게시글을 표시
String pageNum = request.getParameter("pageNum");
if(pageNum == null) pageNum = "1";

int currentPage = Integer.parseInt(pageNum); // 현재 페이지
int startRow = (currentPage -1) * pageSize + 1; // 현재 페이지의 첫번째 행
int endRow = currentPage * pageSize; 	// 현재 페이지의 마지막 행

// ################

// BoardDAO 클래스 연결
BoardDAO boardDAO = BoardDAO.getInstance();
// 전체글수
int cnt = boardDAO.getBoardCount();
// 게시판 전체 정보를 currentPage의 pageSize 크기만큼 획득
List<BoardDTO> boardList = boardDAO.getBoardList(startRow, pageSize);

// 매 페이지마다 전체 글수에 대한 역순 번호
int number = cnt - ((currentPage-1) * pageSize); 


      out.write("\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("\r\n");
      out.write("	<div class=\"m_title\"><a href=\"boardList.jsp\">Crush 팬 카페</a></div>\r\n");
      out.write("	<div class=\"s_title\">전체 게시판</div> <br>\r\n");
      out.write("	<div class=\"top_info\">\r\n");
      out.write("		<span class=\"s_cnt\">전체글수: ");
      out.print(cnt );
      out.write(" </span>&ensp;&ensp;\r\n");
      out.write("		<span class=\"s_id\"><a href=\"../member/memberInfoForm.jsp\">");
      out.print(memberId );
      out.write("님</a></span>\r\n");
      out.write("		&ensp; | &ensp;<span class=\"s_logout\"><a href=\"../logon/memberLogout.jsp\">로그아웃</a></span>\r\n");
      out.write("		&ensp; | &ensp;<span class=\"s_write\"><a href=\"boardWriteForm.jsp\">글등록</a></span>\r\n");
      out.write("	</div> <br>\r\n");
      out.write("	\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th width=\"8%\">번호</th>\r\n");
      out.write("			<th width=\"50%\">제목</th>\r\n");
      out.write("			<th width=\"14%\">작성자</th>\r\n");
      out.write("			<th width=\"20%\">작성일</th>\r\n");
      out.write("			<th width=\"8%\">조회수</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
 if(cnt == 0) { 
      out.write("\r\n");
      out.write("			<tr><td colspan=\"5\" class=\"no_board\">등록된 글이 없습니다.</td></tr>\r\n");
      out.write("		");
} else {
			for(BoardDTO board : boardList) {
				int num = board.getNum();
			
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td class=\"center\">");
      out.print(number-- );
      out.write("</td>\r\n");
      out.write("				<td class=\"left\">\r\n");
      out.write("					");

					int width = 0;
					if(board.getRe_level() > 0) { // 댓글이라면
						width = board.getRe_level() * 10;
						out.print("<img src='../images/level.png' width='" + width + "' height='16'>");
						out.print("<img src='../images/re.png' width='16' height='16'>");
					
      out.write("\r\n");
      out.write("					");
}
      out.write("\r\n");
      out.write("					<a href=\"boardContent.jsp?num=");
      out.print(num);
      out.write("&pageNum=");
      out.print(pageNum);
      out.write('"');
      out.write('>');
      out.print(board.getSubject());
      out.write("</a>\r\n");
      out.write("					");

					if(board.getReadcount() > 10) {
						out.print("<img src='../images/hot.png' width='16' height='16'>");
					}
					
      out.write("\r\n");
      out.write("				</td>\r\n");
      out.write("				<td class=\"center\">");
      out.print(board.getWriter() );
      out.write("</td>\r\n");
      out.write("				<td class=\"center\">");
      out.print(sdf.format(board.getRegDate()) );
      out.write("</td>\r\n");
      out.write("				<td class=\"center\">");
      out.print(board.getReadcount() );
      out.write("</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		");
} } 
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	");
      out.write("\r\n");
      out.write("	<div id=\"paging\">\r\n");
      out.write("	");

	if(cnt > 0) {
		// 전체 페이지수 계산
		int pageCount = cnt / pageSize + (cnt%pageSize==0? 0 : 1);
		int startPage = 1; //시작페이지 번호
		int pageBlock = 10; //페이징의 개수 
		
		// 시작 페이지 설정
		if(currentPage % 10 != 0) startPage = (currentPage/10)*10 +1;
		else startPage = (currentPage/10 -1) * 10 +1;
			
		// 끝 페이지 설정
		int endPage = startPage + pageBlock - 1;
		if(endPage > pageCount) endPage = pageCount;
		
		// 맨처음 페이지 이동 처리
		if(startPage > 10) {
			out.print("<a href='boardList.jsp?pageNum=1'><div id='pBox' class='pBox_b' title='첫 페이지'>" + "〈〈" + "</div></a>");
		}
		
		// 이전 페이지 처리
		if(startPage > 10 ) {
			out.print("<a href='boardList.jsp?pageNum=" + (currentPage-10) + "'><div id='pBox' class='pBox_b' title='이전 10페이지'>" + "〈" + "</div></a>");
		}
		// 페이징 블럭 출력 처리
		for(int i=startPage; i<=endPage; i++) {
			if(currentPage == i) { // 선택된 페이지가 현재 페이지일 때
				out.print("<div id='pBox' class='pBox_c'>" + i + "</div>");
			} else {		// 선택된 페이지가 다른 페이지일 떄 -> 이동에 대한 링크 설정
				out.print("<a href='boardList.jsp?pageNum=" + i + "'><div id='pBox'>" + i + "</div></a>");	
			}
		}
		
		// 다음 페이지 처리 
		if(endPage < pageCount) {
			int movePage = currentPage + 10;
			if(movePage > pageCount) movePage=pageCount;
			out.print("<a href='boardList.jsp?pageNum=" + movePage + "'><div id='pBox' class='pBox_b' title='다음 10페이지'>" + "〉" + "</div></a>");
		}
		
		// 맨 끝 페이지 이동처리
		if(endPage < pageCount) {
			out.print("<a href='boardList.jsp?pageNum=" + pageCount + "'><div id='pBox' class='pBox_b' title='끝 페이지'>" + "〉〉" + "</div></a>");
		}
	}
	
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
